<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!--存储Easily工程信息-->
<project>
  <AppVersion>V0.2</AppVersion>
  <hard_connect>
    <J1></J1>
    <J2>温度传感器1</J2>
    <J3></J3>
    <J4></J4>
    <J5></J5>
    <J6></J6>
    <J7></J7>
    <J8></J8>
  </hard_connect>
  <control_Cnt>[彩灯, 0][电机, 0][风扇模块, 0][小灯, 0][加速度传感器, 0][超声波传感器, 0][声音传感器, 0][高精温度传感器, 0][温度传感器, 2][红外循迹, 0][人体红外, 0][碰撞检测, 0][触发式开关, 1][可调亮度小灯, 0][蜂鸣器, 0]</control_Cnt>
  <source name="main">
    <control id="0">
      <type>1</type>
      <module_name>开始</module_name>
      <icon_name>开始</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>6</up_dot>
      <index_array>0</index_array>
      <func_type>1</func_type>
      <code_comment>程序开始</code_comment>
      <insert_code></insert_code>
      <save></save>
      <father exist="false">
        <type>1</type>
        <index>-1</index>
      </father>
      <son exist="true">
        <type>0</type>
        <index>1</index>
        <dotX>2</dotX>
        <dotY>13</dotY>
      </son>
    </control>
    <control id="1">
      <type>4</type>
      <module_name>条件循环</module_name>
      <icon_name>条件循环</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>11</up_dot>
      <index_array>1</index_array>
      <func_type>1</func_type>
      <code_comment>循环条件：1</code_comment>
      <insert_code>while(1) 
{</insert_code>
      <save></save>
      <father exist="true">
        <type>0</type>
        <index>0</index>
      </father>
      <son exist="true">
        <type>0</type>
        <index>3</index>
        <dotX>2</dotX>
        <dotY>18</dotY>
      </son>
    </control>
    <control id="2">
      <type>4</type>
      <module_name>条件循环End</module_name>
      <icon_name>条件循环End</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>31</up_dot>
      <index_array>2</index_array>
      <func_type>1</func_type>
      <code_comment>条件循环结束</code_comment>
      <insert_code>} //条件循环结束</insert_code>
      <save></save>
      <father exist="true">
        <type>0</type>
        <index>5</index>
      </father>
      <son exist="false">
        <type>1</type>
        <index>-1</index>
        <dotX>-1</dotX>
        <dotY>-1</dotY>
      </son>
    </control>
    <control id="3">
      <type>2</type>
      <module_name>温度传感器</module_name>
      <icon_name>温度传感器1</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>16</up_dot>
      <index_array>3</index_array>
      <func_type>1</func_type>
      <code_comment>读取温度传感器数据</code_comment>
      <insert_code>	bJ2_adcSensor_read_Temp1 = adcSensor_read_Temp(J2);//读取温度传感器数据</insert_code>
      <save>;</save>
      <father exist="true">
        <type>0</type>
        <index>1</index>
      </father>
      <son exist="true">
        <type>0</type>
        <index>4</index>
        <dotX>2</dotX>
        <dotY>23</dotY>
      </son>
    </control>
    <control id="4">
      <type>1</type>
      <module_name>数码管模块</module_name>
      <icon_name>数码管模块</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>21</up_dot>
      <index_array>4</index_array>
      <func_type>1</func_type>
      <code_comment>数码管显示</code_comment>
      <insert_code>digitalTube_control(J8,);//数码管显示</insert_code>
      <save>True;;</save>
      <father exist="true">
        <type>0</type>
        <index>3</index>
      </father>
      <son exist="true">
        <type>0</type>
        <index>5</index>
        <dotX>2</dotX>
        <dotY>28</dotY>
      </son>
    </control>
    <control id="5">
      <type>1</type>
      <module_name>延时</module_name>
      <icon_name>延时</icon_name>
      <index_db>-1</index_db>
      <left_dot>2</left_dot>
      <up_dot>26</up_dot>
      <index_array>5</index_array>
      <func_type>1</func_type>
      <code_comment>延时1000毫秒</code_comment>
      <insert_code>	Delay_ms(1000);//延时1000毫秒</insert_code>
      <save>1000</save>
      <father exist="true">
        <type>0</type>
        <index>4</index>
      </father>
      <son exist="true">
        <type>0</type>
        <index>2</index>
        <dotX>2</dotX>
        <dotY>33</dotY>
      </son>
    </control>
  </source>
  <code name="temp">
    <isAdvanceMode>false</isAdvanceMode>
    <main.c>//======================================================================
//文件名称：main.c
//功能概要：应用工程主函数及部分子函数
//版权所有：苏大arm技术中心(sumcu.suda.edu.cn)
//版本更新：2017.08:1.0, 2019.1:A.10
//功能描述：说明见工程文件夹下的Doc文件夹内Readme.txt文件
//======================================================================
#define GLOBLE_VAR                     //定义全局变量宏标识
#include "includes.h"                  //包含总头文件
//----------------------------------------------------------------------
//【根据实际需要增删】声明使用到的内部函数
//main.c使用的内部函数声明处
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
int main(void)
{
	////=======================（1）启动部分（开头）=======================
	//（1.1）声明main函数使用的局部变量
	uint16_t bJ2_adcSensor_read_Temp1;//存储J2口连接的温度传感器获取的数据
	//（1.2）初始化main函数使用的局部变量和全局变量
	//（1.3）【不变】 关总中断
	DISABLE_INTERRUPTS;
	//（1.4）【不变】获取BIOS构件接口并设置中断服务例程
	//（1.5）用户外设模块初始化
	adcSensor_init(J2);//初始化温度传感器1
	digitalTube_init(J8);//初始化数码管模块
	//（1.6）使能模块中断
	//（1.7）【不变】开总中断
	ENABLE_INTERRUPTS;
	//=======================（1）启动部分（结尾）=======================
	//函数实现
   while(1) 
   {
      	bJ2_adcSensor_read_Temp1 = adcSensor_read_Temp(J2);//读取温度传感器数据
      digitalTube_control(J8,);//数码管显示
      	Delay_ms(1000);//延时1000毫秒
   } //条件循环结束

}
</main.c>
    <isr.c>//=====================================================================
//文件名称：isr.c
//功能概要： 中断底层驱动构件源文件
//版权所有：苏大arm技术中心(sumcu.suda.edu.cn)
//更新记录：2017.01：1.0；2019.01：A.10
//=====================================================================
#include "includes.h"

/*
 知识要素：
 1.本文件中的中断处理函数调用的均是相关设备封装好的具体构件，在更换芯片
 时，只需保证设备的构件接口一致，即可保证本文件的相关中断处理函数不做任何
 更改，从而达到芯片无关性的要求。
 */
</isr.c>
    <includes.h>//======================================================================
//文件名称：includes.h
//功能概要：应用工程总头文件
//版权所有：苏大arm技术中心(sumcu.suda.edu.cn)
//版本更新：2017.2.1  V1.0， 2018.10.30 版本A.02
//功能描述：（1）包含用到的构件；（2）宏常数定义；（3）自定义数据类型；
//    （4）声明全局变量。
//备    注：本文件共有两类代码，一类为【根据实际需要增删】，此类代码根据具体
//    项目需求进行更改；另一类为【不动】，此类代码与具体项目无关，是通用的，
//    无需根据具体项目进行更改。
//======================================================================

#ifndef _INCLUDES_H     //防止重复定义（开头）
#define _INCLUDES_H

//（1）【根据实际需要增删】包含用到的构件
#include "user.h"
#include "gcnb.h"
#include "adcSensor.h"
#include "digitalTube.h"
//（2）【根据实际需要增删】全局使用的宏常数。命名规范见注1
//（3）【根据实际需要增删】自定义数据类型
#pragma  pack(push,1)        //取消4字节对齐
typedef struct FlashData
{
	uint8_t equipName[30];      //产品名称
	uint8_t equipID[20];        //产品序列号
	uint8_t equipType[20];      //产品型号
	uint8_t vendor[30];         //生产厂家  100
	uint8_t softVer[4];         //软件版本
	uint64_t productTime;       //生产时间（64位时间戳）
	uint8_t userName[20];       //用户名
	uint8_t phone[11];          //手机号  43
	uint8_t serverIP[15];       //服务器IP
	uint8_t serverPort[5];      //服务器端口号
	uint32_t sendFrequencySec;  //发送频率
	uint32_t resetCount;        //复位次数
	uint8_t  frameCmd[2];       //命令   30
	uint8_t UE_SSID[32];        //接入点SSID
	uint8_t UE_PSSWD[32];       //接入点密码
}FlashData;
typedef struct UserData
{
    uint8_t cmd[2];           //用户命令
	uint16_t sn;              //帧号
	uint8_t IMSI[15];         //IMSI号
	uint8_t serverIP[15];     //服务器IP
	uint8_t serverPort[5];    //服务器端口
	uint64_t currentTime;     //发送时间（64位时间戳）
	uint32_t resetCount;      //复位的次数
	uint32_t sendFrequencySec;//发送时间间隔（秒）
	uint8_t userName[20];     //用户名
	uint8_t softVer[4];       //软件版本
	uint8_t equipName[30];    //产品名称
	uint8_t equipID[20];      //产品序列号
	uint8_t equipType[20];    //产品类型
	uint8_t vendor[30];       //生产厂家
	int32_t mcuTemp;          //芯片温度
	uint8_t surpBaseInfo[20]; //备注1
	uint8_t phone[11];        //手机号
	uint8_t IMEI[15];         //IMEI号
	uint8_t signalPower;      //信号强度
	uint16_t bright;          //光线亮度（光敏传感器A/D值）
	uint16_t touchNum;        //触摸按键次数（TSI）
	uint8_t surplusInfo[20];  //备注2
	uint8_t lbs_location[25];
 uint64_t startTime;     //开始时间（64位时间戳）
}UserData;
#pragma  pack(pop)           //恢复4字节对齐
//（4）【根据实际需要增删】声明全局变量。命名规范见注2。
//【不动】宏定义全局变量前缀G_VAR_PREFIX。实现原理见注3。
#ifdef GLOBLE_VAR                      //GLOBLE_VAR在main.c文件中有宏定义
  #define G_VAR_PREFIX                 //前缀G_VAR_PREFIX定义为空
#else                                  //GLOBLE_VAR在非main.c文件中无定义
  #define G_VAR_PREFIX extern         //前缀G_VAR_PREFIX定义为"extern"
#endif

//（在此增加全局变量）
G_VAR_PREFIX uint16_t gcUserRecvLen;    //用户/配置数据帧长度
G_VAR_PREFIX uint8_t  gCount;
G_VAR_PREFIX vuint16_t gcRecvDCLen;
G_VAR_PREFIX vuint8_t gcReccrc32[4];
G_VAR_PREFIX uint16_t gcRecvLen;        //串口接收到的数据长度，为0时表示没有收到数据
G_VAR_PREFIX UserData  gUserData;       //用户信息帧结构体
G_VAR_PREFIX FlashData gFlashData;      //需要写入flash中的数据
G_VAR_PREFIX uint64_t  gTimeSec;        //时间戳
G_VAR_PREFIX vuint8_t   gTimeString[20]; 
G_VAR_PREFIX uint8_t   gcRecvBuf[2048];  //串口接收数据缓冲区
G_VAR_PREFIX  uint8_t  gTime[3];        //时间数组
G_VAR_PREFIX uint32_t  Retcount;             //用于记录进入中断次数
G_VAR_PREFIX struct MAC gMac;        //时间数组
G_VAR_PREFIX struct WiFiData gWiFiData;             //用于记录进入中断次数
const static FlashData flashInit[]=
	{
		{
		//012345678901234567890123456789  产品名称equipName[30]
		"[金葫芦]WiFi终端UE模板",
		//01234567890123456789  产品序列号equipID[20]
		"SD-23-05      ",
		//01234567890123456789  产品型号equipType[20]
		"AHL-STM32-WiFi-DX",
		//012345678901234567890123456789    生产厂家vendor[30]
		"SD-ARM 嵌入式人工智能与物联网",
		//0123  软件版本softVer[4]
		"0.40",
		1683614384,
		//01234567890123456789  用户名userName[20]
		"WiFi",
		//01234567890  手机号phone[11]
		"13000000000",
		//012345678901234  服务器IPserverIP[15]
		"116.62.63.164",
		//01234 服务器端口号serverPort[5]
		"34447",
		//③用户存入flash的信息
		5,                          //发送频率
		0,                            //复位次数
		"U0",                        //命令
		"oppo",                      //命令
		"123456xw"                  //命令
		}
	};
#endif
/*
知识要素：
 （1）本文件共有两类代码，一类为【根据实际需要增删】，此类代码根据具体
 项目需求进行更改；另一类为【不动】，此类代码与具体项目无关，是通用的，
 无需根据具体项目进行更改。
 （2）全局变量一处声明多处使用处理方法代码段是为了解决全局变量重复声明
 的问题，宏GLOBLE_VAR仅在main.c中声明，所以只有在main.c中包含
 本头文件时才会声明全局变量，在其他文件中包含本文件时，编译时，就会自动加
 上前缀extern，表明是main函数中声明的全局变量，该文件中直接使用。
 （3）声明全局变量时，一律加前缀G_VAR_PREFIX，并只在本文件
 的“全局变量声明处”声明， 仅在此一次声明即可。 全局变量命名一律以g开头，
 尽可能保证全工程内唯一性，并且一定要注明其含义（声明时不准赋值）。
 （4）全局使用的宏常数，使用全大写
 */
</includes.h>
  </code>
</project>